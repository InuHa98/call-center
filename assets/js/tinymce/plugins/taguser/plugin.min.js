;(function (tinymce, $) {
    'use strict';


    var Tag_username = function(editor, options) {
        this.editor = editor;
        this.options = options;
        this.hasFocus = true;
        this.query_username = '';

        //this.panel = 
        this.renderPanel();
        this.renderInput();
        this.addEvents();
    };

    Tag_username.prototype = {
        constructor: Tag_username,
        selector_panel: null, 
        regex_username: /^(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$/,
        timer_input: null,
        delay_input: function (callback, ms) {
            clearTimeout(this.timer_input);
            this.timer_input = setTimeout(callback, ms);
        },

        renderInput: function () {
            var rawHtml =  '<span id="autocomplete">' +
                '<span id="autocomplete-delimiter">' + this.options.delimiter + '</span>' +
                '<span id="autocomplete-searchtext"><span class="dummy">\uFEFF</span></span>' +
                '</span>';

            console.log(rawHtml);

            this.editor.execCommand('mceInsertContent', false, rawHtml);
            this.editor.focus();
            this.editor.selection.select(this.editor.selection.dom.select('span#autocomplete-searchtext span')[0]);
            this.editor.selection.collapse(0);
        },

        renderPanel: function() {
            var id = 'mce-panel-tag-username';
            if($('#' + id).length > 0)
            {
                this.selector_panel = $('#' + id);
            }
            else
            {
                this.selector_panel = $('<div id="' + id + '" class="mce-panel-tag-username"></div>');
                this.selector_panel.appendTo('body');
            }
        },

        input_username: function(e) {
            var character = e.data;
            if(character === this.options.delimiter)
            {
                return;
            }

            if(character === null)
            {
                this.query_username = this.query_username.slice(0, -1);
            }
            else if(character === " ")
            {
                return this.clear();
            }
            else
            {
                this.query_username = this.query_username + character;
            }

            var find_user = $.proxy(function() {
                if(this.regex_username.test(this.query_username))
                {
                    this.search_user();
                }
            }, this);

            this.delay_input(find_user, 500);
            
        },

        input_keyup: function(e) {
            switch (e.which || e.keyCode) {
                case 9://TAB
                case 13://ENTER
                    this.clear();
                    break;

                case 27://ESC
                    //this.cleanUp(true);
                    break;

                default:
                    //this.lookup();
            }
        },

        search_user: function() {
            console.log(this.editor.selection.getBoundingClientRect());
            console.log(this.editor.selection.getSel());
        },

        addEvents: function () {
            this.editorEventInput = $.proxy(this.input_username, this);
            this.editorEventKeyUp = $.proxy(this.input_keyup, this);

            this.editor.on('input', this.editorEventInput);
            this.editor.on('keyup', this.editorEventKeyUp);
            //this.editor.on('keydown', this.editorKeyDownProxy = $.proxy(this.rteKeyDown, this));
           // this.editor.on('click', this.editorClickProxy = $.proxy(this.rteClicked, this));

            //$(this.editor.getWin()).on('scroll', this.rteScroll = $.proxy(function () { this.cleanUp(true); }, this));
            //$('body').on('click', this.bodyClickProxy = $.proxy(this.rteLostFocus, this));
        },

        removeEvents: function () {
            this.editor.off('input', this.editorEventInput);
            this.editor.off('keyup', this.editorEventKeyUp);
           // this.editor.off('keydown', this.editorKeyDownProxy);
           // this.editor.on('click', this.editorClickProxy);
           // $(this.editor.getWin()).off('scroll', this.rteScroll);
           // $('body').off('click', this.bodyClickProxy);
        },

        clear: function() {
            this.removeEvents();
            this.hasFocus = false;
            this.query_username = '';
            this.timer_input = null;
            console.log(this.selector_panel);
            this.selector_panel.remove();

            console.log('clear');
        }
    };

    tinymce.create('tinymce.plugins.Tag_username', {

        init: function(editor) {
            var tag_username;
            var options = editor.getParam('tag_username') || {};
            options.delimiter = (options.delimiter !== undefined) ? options.delimiter : '@';


            function checkShowTag() {
                var isLink = $(editor.selection.getNode()).is('a'),
                    character = editor.selection.getRng().startContainer.textContent.substr(editor.selection.getRng().startOffset - 1, 1);

                if((!isLink && !$.trim(character).length) && (tag_username === undefined || (tag_username.hasFocus !== undefined && !tag_username.hasFocus)))
                {
                    return true;
                }

                return false;
            }

            editor.on('keypress', function (e) {
                if ((String.fromCharCode(e.which || e.keyCode) === options.delimiter) && checkShowTag()) {
                    tag_username = new Tag_username(editor, options);
                }
            });
        },

        
        getInfo: function () {
            return {
                longname: 'Tag Username',
                author: 'InuHa',
                version: tinymce.majorVersion + '.' + tinymce.minorVersion
            };
        }
    });

    tinymce.PluginManager.add('taguser', tinymce.plugins.Tag_username);

})(tinymce, jQuery);